// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using TickTack;
using TickTack.Models;

namespace TickTack
{
    public static partial class DevicesExtensions
    {
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        public static object Delete(this IDevices operations, string deviceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevices)s).DeleteAsync(deviceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteWithOperationResponseAsync(deviceId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        public static GetDevicesResponse GetAll(this IDevices operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevices)s).GetAllAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetDevicesResponse> GetAllAsync(this IDevices operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<TickTack.Models.GetDevicesResponse> result = await operations.GetAllWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        public static GetDeviceResponse GetDevice(this IDevices operations, string deviceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevices)s).GetDeviceAsync(deviceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<GetDeviceResponse> GetDeviceAsync(this IDevices operations, string deviceId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<TickTack.Models.GetDeviceResponse> result = await operations.GetDeviceWithOperationResponseAsync(deviceId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        public static object SyncPost(this IDevices operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDevices)s).SyncPostAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TickTack.IDevices.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> SyncPostAsync(this IDevices operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.SyncPostWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}

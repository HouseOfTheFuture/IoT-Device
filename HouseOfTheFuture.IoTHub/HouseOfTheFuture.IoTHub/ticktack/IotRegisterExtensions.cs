// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using HouseOfTheFuture.IoTHub.Host;
using HouseOfTheFuture.IoTHub.Host.Models;
using Microsoft.Rest;

namespace HouseOfTheFuture.IoTHub.Host
{
    public static partial class IotRegisterExtensions
    {
        /// <param name='operations'>
        /// Reference to the HouseOfTheFuture.IoTHub.Host.IIotRegister.
        /// </param>
        /// <param name='register'>
        /// Required.
        /// </param>
        public static RegisterIotDeviceResponse Post(this IIotRegister operations, RegisterIotDeviceRequest register)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIotRegister)s).PostAsync(register);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the HouseOfTheFuture.IoTHub.Host.IIotRegister.
        /// </param>
        /// <param name='register'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<RegisterIotDeviceResponse> PostAsync(this IIotRegister operations, RegisterIotDeviceRequest register, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<HouseOfTheFuture.IoTHub.Host.Models.RegisterIotDeviceResponse> result = await operations.PostWithOperationResponseAsync(register, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}

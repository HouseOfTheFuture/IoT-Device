// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace TickTack.Models
{
    public partial class RegisterIotDeviceRequest
    {
        private string _currentDeviceId;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string CurrentDeviceId
        {
            get { return this._currentDeviceId; }
            set { this._currentDeviceId = value; }
        }
        
        private IList<string> _sensorIds;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> SensorIds
        {
            get { return this._sensorIds; }
            set { this._sensorIds = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RegisterIotDeviceRequest class.
        /// </summary>
        public RegisterIotDeviceRequest()
        {
            this.SensorIds = new LazyList<string>();
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type RegisterIotDeviceRequest
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.CurrentDeviceId != null)
            {
                outputObject["currentDeviceId"] = this.CurrentDeviceId;
            }
            JArray sensorIdsSequence = null;
            if (this.SensorIds != null)
            {
                if (this.SensorIds is ILazyCollection<string> == false || ((ILazyCollection<string>)this.SensorIds).IsInitialized)
                {
                    sensorIdsSequence = new JArray();
                    outputObject["sensorIds"] = sensorIdsSequence;
                    foreach (string sensorIdsItem in this.SensorIds)
                    {
                        if (sensorIdsItem != null)
                        {
                            sensorIdsSequence.Add(sensorIdsItem);
                        }
                    }
                }
            }
            return outputObject;
        }
    }
}

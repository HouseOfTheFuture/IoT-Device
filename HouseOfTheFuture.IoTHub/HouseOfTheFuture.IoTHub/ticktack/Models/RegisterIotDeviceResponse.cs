// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace HouseOfTheFuture.IoTHub.Host.Models
{
    public partial class RegisterIotDeviceResponse
    {
        private string _deviceId;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string DeviceId
        {
            get { return this._deviceId; }
            set { this._deviceId = value; }
        }
        
        private string _hubDeviceKey;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string HubDeviceKey
        {
            get { return this._hubDeviceKey; }
            set { this._hubDeviceKey = value; }
        }
        
        private bool? _isConfigured;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool? IsConfigured
        {
            get { return this._isConfigured; }
            set { this._isConfigured = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RegisterIotDeviceResponse class.
        /// </summary>
        public RegisterIotDeviceResponse()
        {
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken deviceIdValue = inputObject["deviceId"];
                if (deviceIdValue != null && deviceIdValue.Type != JTokenType.Null)
                {
                    this.DeviceId = ((string)deviceIdValue);
                }
                JToken hubDeviceKeyValue = inputObject["hubDeviceKey"];
                if (hubDeviceKeyValue != null && hubDeviceKeyValue.Type != JTokenType.Null)
                {
                    this.HubDeviceKey = ((string)hubDeviceKeyValue);
                }
                JToken isConfiguredValue = inputObject["isConfigured"];
                if (isConfiguredValue != null && isConfiguredValue.Type != JTokenType.Null)
                {
                    this.IsConfigured = ((bool)isConfiguredValue);
                }
            }
        }
    }
}
